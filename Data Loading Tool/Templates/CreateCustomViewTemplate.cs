// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 12.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Data_Loading_Tool.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Data_Loading_Tool.Models;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public partial class CreateCustomViewTemplate : CreateCustomViewTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\ncreate view [");
            
            #line 9 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(model.ViewName));
            
            #line default
            #line hidden
            this.Write("]\r\nas\r\nselect \r\n");
            
            #line 12 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

	Boolean firstSelect = true;

	foreach(CreateViewMeasureDimensionModel measure in model.Measures)
	{
		if(firstSelect)
		{

            
            #line default
            #line hidden
            this.Write("\t\r\n\t [");
            
            #line 20 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].LsoaName\r\n");
            
            #line 21 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
 
			if(measure.Dimensions.Count() == 0)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t,[");
            
            #line 25 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].FactCount as [");
            
            #line 25 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write(" - All]\r\n");
            
            #line 26 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

			}
			else
			{
				foreach(String dimValue in measure.DimensionValues)
				{		

            
            #line default
            #line hidden
            this.Write("\t,[");
            
            #line 33 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].[");
            
            #line 33 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimValue));
            
            #line default
            #line hidden
            this.Write("] as [");
            
            #line 33 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write(" - ");
            
            #line 33 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimValue));
            
            #line default
            #line hidden
            this.Write(" Count]\r\n");
            
            #line 34 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

				}
			}

		}
		else
		{
			if(measure.Dimensions.Count() == 0)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t,[");
            
            #line 44 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].FactCount as [");
            
            #line 44 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write(" - All]\r\n");
            
            #line 45 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

			}
			else
			{
				foreach(String dimValue in measure.DimensionValues)
				{		

            
            #line default
            #line hidden
            this.Write("\t,[");
            
            #line 52 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].[");
            
            #line 52 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimValue));
            
            #line default
            #line hidden
            this.Write("] as [");
            
            #line 52 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write(" - ");
            
            #line 52 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimValue));
            
            #line default
            #line hidden
            this.Write(" Count]\r\n");
            
            #line 53 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

				}
			}
		}

            
            #line default
            #line hidden
            this.Write("\t,[");
            
            #line 58 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].LoadReference as [");
            
            #line 58 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write(" - Loading reference]\r\n");
            
            #line 59 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

	firstSelect = false;
	}

            
            #line default
            #line hidden
            this.Write("\r\nfrom\r\n");
            
            #line 65 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"


bool firstMeasure = true;
String firstMeasureName = "";

foreach(CreateViewMeasureDimensionModel measure in model.Measures)
{
	if(!firstMeasure)
	{

            
            #line default
            #line hidden
            this.Write("\tinner join\r\n");
            
            #line 76 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

	}	

            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 80 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

	if(measure.Dimensions.Count() == 0)
	{


            
            #line default
            #line hidden
            this.Write("\t(\r\n\tselect \r\n\t\t\t\t[inner");
            
            #line 87 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].LsoaID\r\n\t\t\t\t, [inner");
            
            #line 88 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].LsoaName\t\t\t\r\n\t\t\t\t, [inner");
            
            #line 89 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].LoadReference\t\t\r\n\t\t\t\t, sum([inner");
            
            #line 90 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].FactCount) as FactCount\r\n");
            
            #line 91 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

	}
	else
	{	

            
            #line default
            #line hidden
            this.Write("\t(\r\n\tselect [Pivot Table].LsoaID, [Pivot Table].LsoaName, [Pivot Table].LoadRefer" +
                    "ence, ");
            
            #line 97 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(",", measure.DimensionValues.Select(x => String.Format("[Pivot Table].[{0}]", x)))));
            
            #line default
            #line hidden
            this.Write(" from\r\n\t\t(\r\n\t\tselect \r\n");
            
            #line 100 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

		Boolean firstDimension = true;

		foreach(CreateViewDimValueModel dimension in measure.Dimensions)
		{
			if(firstDimension)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\t\t[");
            
            #line 108 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimension.DimensionID));
            
            #line default
            #line hidden
            this.Write("].LsoaID\r\n\t\t\t\t, [");
            
            #line 109 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimension.DimensionID));
            
            #line default
            #line hidden
            this.Write("].LsoaName\t\r\n\t\t\t\t, [");
            
            #line 110 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimension.DimensionID));
            
            #line default
            #line hidden
            this.Write("].LoadReference\t\t\r\n\t\t\t\t, [");
            
            #line 111 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimension.DimensionID));
            
            #line default
            #line hidden
            this.Write("].DimensionValue\t\t\t\r\n\t\t\t\t, sum([");
            
            #line 112 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimension.DimensionID));
            
            #line default
            #line hidden
            this.Write("].FactCount) as FactCount\r\n");
            
            #line 113 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
			
			}
			
			firstDimension = false;		
		}
	}


            
            #line default
            #line hidden
            this.Write("\t\t\t\r\n\r\nfrom\r\n\r\n");
            
            #line 125 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

	if(measure.Dimensions.Count() == 0)
	{


            
            #line default
            #line hidden
            this.Write(@"			(
				SELECT        
					I.FactInstanceID,
					L.LsoaID,
					L.LsoaName, 
					I.LoadReference,
					I.Value AS FactCount
				FROM            
					dbo.FactInstance AS I 
				INNER JOIN
					dbo.LSOA AS L 
				ON 
					L.LsoaID = I.LsoaID 
				INNER JOIN
					dbo.FactDimensionSet AS S 
				ON 
					I.FactDimensionSetID = S.FactDimensionSetID 
				INNER JOIN
					dbo.Fact AS F 
				ON 
					F.FactID = S.FactID 
				INNER JOIN
					dbo.FactDimensionMapping AS M 
				ON 
					S.FactDimensionSetID = M.FactDimensionSetID 
				INNER JOIN
					dbo.DimensionValue AS V 
				ON 
					V.DimensionValueID = M.DimensionValueID 
				INNER JOIN
					dbo.Dimension AS D 
				ON 
					D.DimensionID = V.DimensionID
				WHERE        					
					(F.FactID = ");
            
            #line 164 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureID));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t) [inner");
            
            #line 165 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("]\t\r\ngroup by [inner");
            
            #line 166 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].LsoaID, [inner");
            
            #line 166 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].LsoaName, [inner");
            
            #line 166 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].LoadReference\r\n) [");
            
            #line 167 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("]\t\r\n");
            
            #line 168 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

	}
	else
	{
		Boolean firstPass = true;
		int firstDimension = -1;

		foreach(CreateViewDimValueModel dimension in measure.Dimensions)
		{
			if(firstPass)
			{

            
            #line default
            #line hidden
            this.Write(@"			(
				SELECT        
					I.FactInstanceID,
					L.LsoaID,
					L.LsoaName, 
					V.DimensionValue , 
					I.LoadReference,
					I.Value AS FactCount
				FROM            
					dbo.FactInstance AS I 
				INNER JOIN
					dbo.LSOA AS L 
				ON 
					L.LsoaID = I.LsoaID 
				INNER JOIN
					dbo.FactDimensionSet AS S 
				ON 
					I.FactDimensionSetID = S.FactDimensionSetID 
				INNER JOIN
					dbo.Fact AS F 
				ON 
					F.FactID = S.FactID 
				INNER JOIN
					dbo.FactDimensionMapping AS M 
				ON 
					S.FactDimensionSetID = M.FactDimensionSetID 
				INNER JOIN
					dbo.DimensionValue AS V 
				ON 
					V.DimensionValueID = M.DimensionValueID 
				INNER JOIN
					dbo.Dimension AS D 
				ON 
					D.DimensionID = V.DimensionID
				WHERE        
					(D.DimensionID = ");
            
            #line 215 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimension.DimensionID));
            
            #line default
            #line hidden
            this.Write(") \r\n\t\t\t\t\tAND (F.FactID = ");
            
            #line 216 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureID));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t\t\tAND (V.DimensionValueID in (");
            
            #line 217 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(",", dimension.DimensionValueIDs.Select(x => String.Format("{0}", x)))));
            
            #line default
            #line hidden
            this.Write("))\r\n\r\n\t\t\t) [");
            
            #line 219 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimension.DimensionID));
            
            #line default
            #line hidden
            this.Write("]\t\r\n");
            
            #line 220 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

			firstPass = false;
			firstDimension = dimension.DimensionID;
			}
			else
			{

            
            #line default
            #line hidden
            this.Write(@"			inner join
			(
				SELECT        
					I.FactInstanceID,
					L.LsoaID,
					L.LsoaName, 
					V.DimensionValue,
					I.LoadReference, 
					I.Value AS FactCount
				FROM            
					dbo.FactInstance AS I 
				INNER JOIN
					dbo.LSOA AS L 
				ON 
					L.LsoaID = I.LsoaID 
				INNER JOIN
					dbo.FactDimensionSet AS S 
				ON 
					I.FactDimensionSetID = S.FactDimensionSetID 
				INNER JOIN
					dbo.Fact AS F 
				ON 
					F.FactID = S.FactID 
				INNER JOIN
					dbo.FactDimensionMapping AS M 
				ON 
					S.FactDimensionSetID = M.FactDimensionSetID 
				INNER JOIN
					dbo.DimensionValue AS V 
				ON 
					V.DimensionValueID = M.DimensionValueID 
				INNER JOIN
					dbo.Dimension AS D 
				ON 
					D.DimensionID = V.DimensionID
				WHERE        
					(D.DimensionID = ");
            
            #line 263 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimension.DimensionID));
            
            #line default
            #line hidden
            this.Write(") \r\n\t\t\t\tAND \r\n\t\t\t\t\t(F.FactID = ");
            
            #line 265 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureID));
            
            #line default
            #line hidden
            this.Write(")\r\n\t\t\t\tAND\r\n\t\t\t\t\t(V.DimensionValueID in (");
            
            #line 267 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(",", dimension.DimensionValueIDs.Select(x => String.Format("{0}", x)))));
            
            #line default
            #line hidden
            this.Write("))\r\n\t\t\t) [");
            
            #line 268 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimension.DimensionID));
            
            #line default
            #line hidden
            this.Write("]\t\r\n\t\t\ton [");
            
            #line 269 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(firstDimension));
            
            #line default
            #line hidden
            this.Write("].FactInstanceID = [");
            
            #line 269 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimension.DimensionID));
            
            #line default
            #line hidden
            this.Write("].FactInstanceID\r\n");
            
            #line 270 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

			}
		}

            
            #line default
            #line hidden
            this.Write("\tgroup by\r\n\t[");
            
            #line 275 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(firstDimension));
            
            #line default
            #line hidden
            this.Write("].LsoaID\r\n\t,[");
            
            #line 276 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(firstDimension));
            
            #line default
            #line hidden
            this.Write("].LsoaName\r\n\t,[");
            
            #line 277 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(firstDimension));
            
            #line default
            #line hidden
            this.Write("].LoadReference\r\n");
            
            #line 278 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

		foreach(CreateViewDimValueModel dimension in measure.Dimensions)
		{

            
            #line default
            #line hidden
            this.Write("\t\t\r\n\t\t,[");
            
            #line 283 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(dimension.DimensionID));
            
            #line default
            #line hidden
            this.Write("].DimensionValue\r\n");
            
            #line 284 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

		}	
	

            
            #line default
            #line hidden
            this.Write(")as [Inner");
            
            #line 288 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("]\r\nPIVOT\r\n(\r\n\tSum(FactCount)\r\n\tFOR\r\n\tDimensionValue\tIN (");
            
            #line 293 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(String.Join(",", measure.DimensionValues.Select(x => String.Format("[{0}]", x)))));
            
            #line default
            #line hidden
            this.Write(")\r\n)\r\n[Pivot Table]\r\n) as [");
            
            #line 296 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("] \r\n");
            
            #line 297 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

	}
	if(!firstMeasure)
	{

            
            #line default
            #line hidden
            this.Write("\ton [");
            
            #line 302 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(firstMeasureName));
            
            #line default
            #line hidden
            this.Write("].LsoaID = [");
            
            #line 302 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(measure.MeasureName));
            
            #line default
            #line hidden
            this.Write("].LsoaID\r\n");
            
            #line 303 "C:\Development\Ben B\Code\Geographical Needs\Data Loading Tool\Templates\CreateCustomViewTemplate.tt"

	}

	
	firstMeasureName = measure.MeasureName;
	
	firstMeasure = false;
}

            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "12.0.0.0")]
    public class CreateCustomViewTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
