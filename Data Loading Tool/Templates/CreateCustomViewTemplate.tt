<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Data_Loading_Tool.Models" #>
<#@ output extension=".sql" #>

create view [<#= model.ViewName #>]
as
select 
<#
	Boolean firstSelect = true;

	foreach(CreateViewMeasureDimensionModel measure in model.Measures)
	{
		if(firstSelect)
		{
#>	
	[<#= measure.MeasureName #>].LsoaName
<# 
			if(measure.Dimensions.Count() == 0)
			{
#>
				,[<#= measure.MeasureName #>].FactCount as [<#= measure.MeasureName #> - All]
<#
			}
			else
			{
				foreach(String dimValue in measure.DimensionValues)
				{		
#>
	,[<#= measure.MeasureName #>].[<#= dimValue #>] as [<#= measure.MeasureName #> - <#= dimValue #> Count]
<#
				}
			}

		}
		else
		{
			if(measure.Dimensions.Count() == 0)
			{
#>
				,[<#= measure.MeasureName #>].FactCount as [<#= measure.MeasureName #> - All]
<#
			}
			else
			{
				foreach(String dimValue in measure.DimensionValues)
				{		
#>
	,[<#= measure.MeasureName #>].[<#= dimValue #>] as [<#= measure.MeasureName #> - <#= dimValue #> Count]
<#
				}
			}
		}
	firstSelect = false;
	}
#>

from
<#

bool firstMeasure = true;
String firstMeasureName = "";

foreach(CreateViewMeasureDimensionModel measure in model.Measures)
{
	if(!firstMeasure)
	{
#>
	inner join
<#
	}	
#>

<#
	if(measure.Dimensions.Count() == 0)
	{

#>
	(
	select 
				[inner<#= measure.MeasureName #>].LsoaID
				, [inner<#= measure.MeasureName #>].LsoaName			
				, sum([inner<#= measure.MeasureName #>].FactCount) as FactCount
<#
	}
	else
	{	
#>
	(
	select [Pivot Table].LsoaID, [Pivot Table].LsoaName, <#= String.Join(",", measure.DimensionValues.Select(x => String.Format("[Pivot Table].[{0}]", x))) #> from
		(
		select 
<#
		Boolean firstDimension = true;

		foreach(CreateViewDimValueModel dimension in measure.Dimensions)
		{
			if(firstDimension)
			{
#>
				[<#= dimension.DimensionID #>].LsoaID
				, [<#= dimension.DimensionID #>].LsoaName			
				, [<#= dimension.DimensionID #>].DimensionValue			
				, sum([<#= dimension.DimensionID #>].FactCount) as FactCount
<#			
			}
			
			firstDimension = false;		
		}
	}

#>
			

from

<#
	if(measure.Dimensions.Count() == 0)
	{

#>
			(
				SELECT        
					I.FactInstanceID,
					L.LsoaID,
					L.LsoaName, 
					I.Value AS FactCount
				FROM            
					dbo.FactInstance AS I 
				INNER JOIN
					dbo.LSOA AS L 
				ON 
					L.LsoaID = I.LsoaID 
				INNER JOIN
					dbo.FactDimensionSet AS S 
				ON 
					I.FactDimensionSetID = S.FactDimensionSetID 
				INNER JOIN
					dbo.Fact AS F 
				ON 
					F.FactID = S.FactID 
				INNER JOIN
					dbo.FactDimensionMapping AS M 
				ON 
					S.FactDimensionSetID = M.FactDimensionSetID 
				INNER JOIN
					dbo.DimensionValue AS V 
				ON 
					V.DimensionValueID = M.DimensionValueID 
				INNER JOIN
					dbo.Dimension AS D 
				ON 
					D.DimensionID = V.DimensionID
				WHERE        					
					(F.FactID = <#= measure.MeasureID #>)
			) [inner<#= measure.MeasureName #>]	
group by [inner<#= measure.MeasureName #>].LsoaID, [inner<#= measure.MeasureName #>].LsoaName
) [<#= measure.MeasureName #>]	
<#
	}
	else
	{
		Boolean firstPass = true;
		int firstDimension = -1;

		foreach(CreateViewDimValueModel dimension in measure.Dimensions)
		{
			if(firstPass)
			{
#>
			(
				SELECT        
					I.FactInstanceID,
					L.LsoaID,
					L.LsoaName, 
					V.DimensionValue , 
					I.Value AS FactCount
				FROM            
					dbo.FactInstance AS I 
				INNER JOIN
					dbo.LSOA AS L 
				ON 
					L.LsoaID = I.LsoaID 
				INNER JOIN
					dbo.FactDimensionSet AS S 
				ON 
					I.FactDimensionSetID = S.FactDimensionSetID 
				INNER JOIN
					dbo.Fact AS F 
				ON 
					F.FactID = S.FactID 
				INNER JOIN
					dbo.FactDimensionMapping AS M 
				ON 
					S.FactDimensionSetID = M.FactDimensionSetID 
				INNER JOIN
					dbo.DimensionValue AS V 
				ON 
					V.DimensionValueID = M.DimensionValueID 
				INNER JOIN
					dbo.Dimension AS D 
				ON 
					D.DimensionID = V.DimensionID
				WHERE        
					(D.DimensionID = <#= dimension.DimensionID #>) 
					AND (F.FactID = <#= measure.MeasureID #>)
					AND (V.DimensionValueID in (<#= String.Join(",", dimension.DimensionValueIDs.Select(x => String.Format("{0}", x))) #>))

			) [<#= dimension.DimensionID #>]	
<#
			firstPass = false;
			firstDimension = dimension.DimensionID;
			}
			else
			{
#>
			inner join
			(
				SELECT        
					I.FactInstanceID,
					L.LsoaID,
					L.LsoaName, 
					V.DimensionValue, 
					I.Value AS FactCount
				FROM            
					dbo.FactInstance AS I 
				INNER JOIN
					dbo.LSOA AS L 
				ON 
					L.LsoaID = I.LsoaID 
				INNER JOIN
					dbo.FactDimensionSet AS S 
				ON 
					I.FactDimensionSetID = S.FactDimensionSetID 
				INNER JOIN
					dbo.Fact AS F 
				ON 
					F.FactID = S.FactID 
				INNER JOIN
					dbo.FactDimensionMapping AS M 
				ON 
					S.FactDimensionSetID = M.FactDimensionSetID 
				INNER JOIN
					dbo.DimensionValue AS V 
				ON 
					V.DimensionValueID = M.DimensionValueID 
				INNER JOIN
					dbo.Dimension AS D 
				ON 
					D.DimensionID = V.DimensionID
				WHERE        
					(D.DimensionID = <#= dimension.DimensionID #>) 
				AND 
					(F.FactID = <#= measure.MeasureID #>)
				AND
					(V.DimensionValueID in (<#= String.Join(",", dimension.DimensionValueIDs.Select(x => String.Format("{0}", x))) #>))
			) [<#= dimension.DimensionID #>]	
			on [<#= firstDimension#>].FactInstanceID = [<#= dimension.DimensionID #>].FactInstanceID
<#
			}
		}
#>
	group by
	[<#= firstDimension#>].LsoaID
	,[<#= firstDimension#>].LsoaName
<#
		foreach(CreateViewDimValueModel dimension in measure.Dimensions)
		{
#>
		
		,[<#= dimension.DimensionID #>].DimensionValue
<#
		}	
	
#>
)as [Inner<#= measure.MeasureName#>]
PIVOT
(
	Sum(FactCount)
	FOR
	DimensionValue	IN (<#= String.Join(",", measure.DimensionValues.Select(x => String.Format("[{0}]", x))) #>)
)
[Pivot Table]
) as [<#= measure.MeasureName#>] 
<#
	}
	if(!firstMeasure)
	{
#>
	on [<#= firstMeasureName #>].LsoaID = [<#= measure.MeasureName #>].LsoaID
<#
	}

	
	firstMeasureName = measure.MeasureName;
	
	firstMeasure = false;
}
#>