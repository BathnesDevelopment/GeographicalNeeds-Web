//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Data_Loading_Tool.Database
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Geographical_NeedsEntities : DbContext
    {
        public Geographical_NeedsEntities()
            : base("name=Geographical_NeedsEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Dimension> Dimensions { get; set; }
        public virtual DbSet<DimensionValue> DimensionValues { get; set; }
        public virtual DbSet<Fact> Facts { get; set; }
        public virtual DbSet<FactDimensionMapping> FactDimensionMappings { get; set; }
        public virtual DbSet<FactDimensionSet> FactDimensionSets { get; set; }
        public virtual DbSet<StagingDataset> StagingDatasets { get; set; }
        public virtual DbSet<StagingColumn> StagingColumns { get; set; }
        public virtual DbSet<DataViewColumn> DataViewColumns { get; set; }
        public virtual DbSet<DataView> DataViews { get; set; }
        public virtual DbSet<DimensionToFact> DimensionToFacts { get; set; }
        public virtual DbSet<Geography> Geographies { get; set; }
        public virtual DbSet<GeographyType> GeographyTypes { get; set; }
        public virtual DbSet<FactInstance> FactInstances { get; set; }
    
        public virtual int CreateStagingTable(string tableName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("CreateStagingTable", tableNameParameter);
        }
    
        public virtual int AddColumnToTable(string tableName, string columnName)
        {
            var tableNameParameter = tableName != null ?
                new ObjectParameter("tableName", tableName) :
                new ObjectParameter("tableName", typeof(string));
    
            var columnNameParameter = columnName != null ?
                new ObjectParameter("columnName", columnName) :
                new ObjectParameter("columnName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddColumnToTable", tableNameParameter, columnNameParameter);
        }
    }
}
